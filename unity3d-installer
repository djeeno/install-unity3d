#!/usr/bin/env bash
set -eE -o pipefail

export  stderrPipeDebug="awk \"{print \\\"\\\\033[00m\$(date +%Y-%m-%dT%H:%M:%S%z) [  debug] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"
export stderrPipeNotice="awk \"{print \\\"\\\\033[01m\$(date +%Y-%m-%dT%H:%M:%S%z) [ notice] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"
export  stderrPipeError="awk \"{print \\\"\\\\033[31m\$(date +%Y-%m-%dT%H:%M:%S%z) [  error] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"
export     stderrPipeOK="awk \"{print \\\"\\\\033[32m\$(date +%Y-%m-%dT%H:%M:%S%z) [     ok] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"
export   stderrPipeWarn="awk \"{print \\\"\\\\033[33m\$(date +%Y-%m-%dT%H:%M:%S%z) [warning] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"
export   stderrPipeInfo="awk \"{print \\\"\\\\033[34m\$(date +%Y-%m-%dT%H:%M:%S%z) [   info] \\\"\\\$0\\\"\\\\033[0m\\\"}\" /dev/stdin 1>&2"

# const
declare -r PROG_NAME=unity3d-installer                                               && export PROG_NAME
declare -r UNITY_DOWNLOAD_ARCHIVE_URL=https://unity3d.com/get-unity/download/archive && export UNITY_DOWNLOAD_ARCHIVE_URL

# function 1
selectWritableDir () { for path in "$@"; do if [ -w "${path}" ]; then echo -n "${path}"; return 0; fi; done; return 1; }
checkSupportOS () { if ! uname -s | grep -q Linux; then echo "OS not supported." | sh -c "${stderrPipeError:?}"; exit 1; fi; }
resolveDependencies () {
  if command -v apt-get 1>/dev/null; then
    if ! command -v apt-file 1>/dev/null; then
      echo "apt-file command is required." | sh -c "${stderrPipeError:?}"
      exit 1
    fi
  else
    echo "OS not supported." | sh -c "${stderrPipeError:?}"
    exit 1
  fi
}

# var 1
separator=$(printf '\t')                                       && declare -r Separator="${separator:?}" && export Separator
progDir=$(cd "$(dirname "$0")" && pwd || exit 1)               && declare -r ProgDir="${progDir:?}"     && export ProgDir

# var 2
csvStoreDir=$(selectWritableDir "${HOME:?}" "${ProgDir:?}" /tmp)   && declare -r CSVStoreDir="${csvStoreDir:?}"                              && export CSVStoreDir
: noop                                                             && declare -r UnitySetupURLCSVFile="${CSVStoreDir:?}/.${PROG_NAME:?}.csv" && export UnitySetupURLCSVFile
setupsBaseDir=$(selectWritableDir "${HOME:?}" "${ProgDir:?}" /tmp) && declare -r SetupsBaseDir="${setupsBaseDir:?}"                          && export SetupsBaseDir
installBaseDir=$(selectWritableDir "${HOME:?}")                    && declare -r InstallBaseDir="${installBaseDir:?}"                        && export InstallBaseDir



function CreateOrUpdateUnitySetupURLCSVFile () { (
  # [ fource option ] || [ can't read ${UnitySetupURLCSVFile:?} ] || [ ${UnitySetupURLCSVFile:?} is empty ]
  if [[ $* =~ .*-f.*|.*--fource.* ]] || [[ ! -r ${UnitySetupURLCSVFile:?} ]] || [[ ! -s ${UnitySetupURLCSVFile:?} ]]; then
    echo "Generating a UnitySetup URL csv file as ${UnitySetupURLCSVFile:?} ..." | sh -c "${stderrPipeInfo:?}"
    csvData=$(
      # CSV header
      printf "%s${Separator:?}%s${Separator:?}%s\n" "version" "status" "url"
      # CSV data
      curl -LsS "${UNITY_DOWNLOAD_ARCHIVE_URL:?}" \
        | grep "href=\"unityhub://" \
        | sed "s|^.*\"unityhub://\([^/]*\)/\([^\"]*\)\".*$|https://download.unity3d.com/download_unity/\2/UnitySetup-\1|" \
        | while read -r url; do
            printf "%s${Separator:?}%s${Separator:?}%s\n" "$(printf "%s" "${url}" | sed "s|.*/UnitySetup-||")" "$(curl -ILsS -o /dev/null -w "%{http_code}" "${url:?}")" "${url:?}"
          done \
        | if [[ $* =~ .*-v.*|.*--verbose.* ]]; then tee /dev/stderr; else cat; fi
    )
    echo "${csvData:?}" >"${UnitySetupURLCSVFile:?}"
  fi
  echo "UnitySetup URL csv file was saved as ${UnitySetupURLCSVFile:?}" | sh -c "${stderrPipeInfo:?}"
)}



function InstallUnity () { (
  # [ doesn't have install subcommand and version ]
  if [[ ! $* =~ install.*[[:blank:]]*[[:blank:]]+[^\.]+\.[^\.]+\.[^\.]+ ]]; then
    echo "Specify Unity version." | sh -c "${stderrPipeError:?}"
    exit 1
  fi
  # [ can't read ${UnitySetupURLCSVFile:?} ] || [ ${UnitySetupURLCSVFile:?} is empty ]
  if [[ ! -r ${UnitySetupURLCSVFile:?} ]] || [[ ! -s ${UnitySetupURLCSVFile:?} ]]; then
    CreateOrUpdateUnitySetupURLCSVFile "$@" --verbose
  fi
  # vars
  status=200
  specified_version=$(printf '%s' "$*" | sed "s@install.*[[:blank:]]*[[:blank:]]\([^\.][^\.]*\.[^\.][^\.]*\.[^\.][^\.]*\).*@\1@")
  csvRow=$(grep "^${specified_version//\./\\.}${Separator:?}${status:?}${Separator:?}" "${UnitySetupURLCSVFile:?}")
  if [[ -z "${csvRow:?}" ]]; then
    echo "Specify the version of Unity that can be installed." | sh -c "${stderrPipeError:?}"
    exit 1
  fi
  url=$(echo "${csvRow:?}" | cut -d"${Separator:?}" -f3)
  setupFileName=$(basename "${url:?}")
  defaultUnitySetupDownloadDir="${SetupsBaseDir:?}/${setupFileName:?}" && mkdir -p "${defaultUnitySetupDownloadDir:?}"
  defaultUnitySetupPath="${defaultUnitySetupDownloadDir:?}/${setupFileName:?}"
  cmd="curl -LR '${url:?}' -z '${defaultUnitySetupPath:?}' -o '${defaultUnitySetupPath:?}' && chmod +x '${defaultUnitySetupPath:?}'"
  echo "Run: ${cmd:?}" | sh -c "${stderrPipeInfo:?}" && sh -c "${cmd:?}"

  while true; do
    cmd="'${defaultUnitySetupPath:?}' --help"
    echo "Run: ${cmd:?}" | sh -c "${stderrPipeInfo:?}" && { resultUnitSetup=$(sh -c "${cmd:?}" 2>&1) && break || true; } && echo "${resultUnitSetup:?}" 1>&2
    # lib
    libName="$(echo "${resultUnitSetup:?}" | cut -d: -f3 | tr -d "[:blank:]")"
    cmd="apt-file search ${libName:?}"
    echo "Run: ${cmd:?}" | sh -c "${stderrPipeInfo:?}" && { resultAptSearch=$(sudo -E sh -c "${cmd:?}" 2>&1) || true; } && echo "${resultAptSearch:?}" 1>&2
    # Whether or not "apt-file update" is required.
    if echo "${resultAptSearch:?}" | grep -q "^E: .*apt.*update"; then
      cmd="apt-file update"
      echo "Run: ${cmd:?}" | sh -c "${stderrPipeInfo:?}" && sudo -E sh -c "${cmd:?}"
      continue
    fi
    # Install packages that contain the string "linux-gnu" in their names in preference.
    resultAptSearchEdited=$(echo "${resultAptSearch:?}" | grep "linux-gnu" || true; echo "${resultAptSearch:?}" | grep -v "linux-gnu" || true)
    # install packages
    echo "${resultAptSearchEdited:?}" | cut -d: -f1 | while read -r package; do
      # Skip the installed packages.
      if dpkg -l | grep -Eq "ii[[:blank:]]+${package:?}"; then
        continue
      fi
      cmd="apt-get -y install ${package:?}"
      echo "Run: ${cmd:?}" | sh -c "${stderrPipeInfo:?}" && sudo -E sh -c "${cmd:?}"
    done
  done
  installDir="${InstallBaseDir:?}/Unity/${specified_version:?}"
  installCommands="${defaultUnitySetupPath:?} --unattended --download-location='${defaultUnitySetupDownloadDir:?}' --install-location='${InstallBaseDir:?}'"
  if [[ $* =~ .*-y.*|.*--yes.* ]]; then
    installCommands="yes y | ${installCommands:?}"
  fi
  echo "${installCommands:?}" | sh -c "${stderrPipeOK:?}"
)}



function ListInstallableVersions () { (
  if [[ ! -r ${UnitySetupURLCSVFile:?} ]] || [[ ! -s ${UnitySetupURLCSVFile:?} ]]; then
    echo "UnitySetup URL csv file not found." | sh -c "${stderrPipeWarn:?}"
  fi
  versions=$(
    grep -E "[^${Separator:?}]+${Separator:?}200${Separator:?}[^${Separator:?}]+" "${UnitySetupURLCSVFile:?}" \
      | awk -F"${Separator:?}" "{print \$1}"
  )
  if [[ $* =~ .*-1.*|.*--one-column.* ]]; then
    echo "${versions}"
  elif command -v column 1>/dev/null; then
    echo "${versions}" | column
  else
    echo "${versions}"
  fi
)}



function Usage () { (
  cat << USAGE
${PROG_NAME:?} is a tool for helping to install Unity to Linux.

Usage:

	${PROG_NAME:?} <command> [arguments]

The commands are:

        init        create or update UnitySetup URL csv file as ${UnitySetupURLCSVFile:?}

                    arguments
                        -f, --fource
                            fource update
                        -v, --verbose
                            display verbose info.

        install     install specified version Unity

                    arguments
                        <version>
                            Unity version

        list        list installable Unity versions

                    arguments
                        -1, --one-column
                            If you want to output a single column, add this option

USAGE
)}



function main () {
  checkSupportOS
  resolveDependencies
  case "$1" in
  init)
    CreateOrUpdateUnitySetupURLCSVFile "$@"
    ;;
  install)
    InstallUnity "$@"
    ;;
  list|list-versions)
    ListInstallableVersions "$@"
    ;;
  *)
    Usage
    ;;
  esac
} && main "$@"
