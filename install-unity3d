#!/usr/bin/env bash
set -eE -o pipefail

# const
declare -r PROG_NAME=install-unity3d                                                 && export PROG_NAME
declare -r UNITY_DOWNLOAD_ARCHIVE_URL=https://unity3d.com/get-unity/download/archive && export UNITY_DOWNLOAD_ARCHIVE_URL
declare -r SEPARATOR='\t'                                                            && export SEPARATOR

# function stderr
stderrPipeDebug ()  { awk '{print "\033[00m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [  debug] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeDebug
stderrPipeNotice () { awk '{print "\033[01m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [ notice] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeNotice
stderrPipeError ()  { awk '{print "\033[31m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [  error] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeError
stderrPipeOK ()     { awk '{print "\033[32m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [     ok] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeOK
stderrPipeWarn ()   { awk '{print "\033[33m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [warning] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeWarn
stderrPipeInfo ()   { awk '{print "\033[34m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [   info] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeInfo

# function 1
selectWritableDir () { for path in "$@"; do [ ! -w "${path}" ] || { echo -n "${path}"; return 0; }; done }

# var
# shellcheck disable=SC2155
declare -r ProgDir=$(cd "$(dirname "$0")" && pwd)                         && export ProgDir
# shellcheck disable=SC2155
declare -r StoredDir=$(selectWritableDir "${HOME:?}" "${ProgDir:?}" /tmp) && export StoredDir
declare -r UnitySetupURLCSVFile="${StoredDir:?}/.${PROG_NAME:?}.csv"      && export UnitySetupURLCSVFile



function CreateOrUpdateUnitySetupURLCSVFile () { (
  if [[ $* =~ .*-f.*|.*--fource.* ]] ||  [[ ! -f ${UnitySetupURLCSVFile:?} ]] || [[ ! -s ${UnitySetupURLCSVFile:?} ]]; then
    echo "Generating a UnitySetup URL csv file as ${UnitySetupURLCSVFile:?} ..." | stderrPipeInfo
    csvData=$(
      # CSV header
      printf "%s${SEPARATOR:?}%s${SEPARATOR:?}%s\n" "version" "status" "url"
      # CSV data
      curl -LsS "${UNITY_DOWNLOAD_ARCHIVE_URL:?}" \
        | grep "href=\"unityhub://" \
        | sed "s|^.*\"unityhub://\([^/]*\)/\([^\"]*\)\".*$|https://download.unity3d.com/download_unity/\2/UnitySetup-\1|" \
        | while read -r url; do
            printf "%s${SEPARATOR:?}%s${SEPARATOR:?}%s\n" "$(printf "%s" "${url}" | sed "s|.*/UnitySetup-||")" "$(curl -ILsS -o /dev/null -w "%{http_code}" "${url:?}")" "${url:?}"
          done \
        | if [[ $* =~ .*-v.*|.*--verbose.* ]]; then tee /dev/stderr; else cat; fi
    )
    echo "${csvData:?}" >"${UnitySetupURLCSVFile:?}"
  fi
  echo "UnitySetup URL csv file was saved as ${UnitySetupURLCSVFile:?}" | stderrPipeInfo
)}



function InstallUnity () { (
  if ! uname -s | grep -q Linux; then
    echo "OS not supported." | stderrPipeError
    exit 1
  fi
  if [[ $* =~ install.*[[:blank:]]*[[:blank:]]+[^\.]+\.[^\.]+\.[^\.]+ ]]; then
    # shellcheck disable=SC2001
    specified_version=$(echo "$*" | sed "s@install.*[[:blank:]]*[[:blank:]][[:blank:]]*\([^\.][^\.]*\.[^\.][^\.]*\.[^\.][^\.]*\).*@\1@")
    specified_version_escaped_regex=${specified_version//\./\\.}
    if grep -q "^${specified_version}" "${UnitySetupURLCSVFile:?}"; then
      grep "${specified_version_escaped_regex}" "${UnitySetupURLCSVFile:?}"
    fi
  else
    echo "specify version" | stderrPipeError
  fi
)}



function ListInstallableVersions () { (
  versions=$(
    grep -E "[^${SEPARATOR:?}]+${SEPARATOR:?}200${SEPARATOR:?}[^${SEPARATOR:?}]+" "${UnitySetupURLCSVFile:?}" \
      | awk -F"${SEPARATOR:?}" "{print \$1}"
  )
  if [[ $* =~ .*-1.*|.*--one-column.* ]]; then
    echo "${versions}"
  elif command -v column 1>/dev/null; then
    echo "${versions}" | column
  else
    echo "${versions}"
  fi
)}



function Usage () { (
  cat << USAGE
${PROG_NAME:?} is a tool for helping to install Unity to Linux.

Usage:

	${PROG_NAME:?} <command> [arguments]

The commands are:

        init        create or update UnitySetup URL csv file as ${UnitySetupURLCSVFile:?}

                    arguments
                        -f, --fource
                            fource update
                        -v, --verbose
                            display verbose info.

        install     install specified version Unity

                    arguments
                        <version>
                            Unity version

        list        list installable Unity versions

                    arguments
                        -1, --one-column
                            If you want to output a single column, add this option

USAGE
)}



function main () {
  case "$1" in
  init)
    CreateOrUpdateUnitySetupURLCSVFile "$@"
    ;;
  install)
    InstallUnity "$@"
    ;;
  list|list-versions)
    ListInstallableVersions "$@"
    ;;
  *)
    Usage
    ;;
  esac
} && main "$@"
