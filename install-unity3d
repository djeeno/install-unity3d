#!/usr/bin/env bash
set -eE -o pipefail

# const
declare -r PROG_NAME=install-unity3d && export PROG_NAME
declare -r UNITY_DOWNLOAD_ARCHIVE_URL=https://unity3d.com/get-unity/download/archive && export UNITY_DOWNLOAD_ARCHIVE_URL
declare -r SEPARATOR='\t' && export SEPARATOR

# var
declare -r UnitySetupURLCSVFile="${HOME:?}/.${PROG_NAME:?}.csv" && export UnitySetupURLCSVFile

# function
stderrPipeDebug ()  { awk '{print "\033[00m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [  debug] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeDebug
stderrPipeNotice () { awk '{print "\033[01m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [ notice] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeNotice
stderrPipeError ()  { awk '{print "\033[31m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [  error] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeError
stderrPipeOK ()     { awk '{print "\033[32m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [     ok] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeOK
stderrPipeWarn ()   { awk '{print "\033[33m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [warning] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeWarn
stderrPipeInfo ()   { awk '{print "\033[34m'"$(date +%Y-%m-%dT%H:%M:%S%z)"' [   info] "$0"\033[0m"}' /dev/stdin 1>&2; } && export -f stderrPipeInfo



function CreateOrUpdateUnitySetupURLCSVFile () { (
  if [[ $* =~ .*-f.* ]] ||  [[ ! -f ${UnitySetupURLCSVFile:?} ]] || [[ ! -s ${UnitySetupURLCSVFile:?} ]]; then
    echo "Generating a UnitySetup URL csv file..." | stderrPipeInfo
    csvData=$(
      # CSV header
      printf "%s${SEPARATOR:?}%s${SEPARATOR:?}%s\n" "version" "status" "url"
      # CSV data
      curl -LsS "${UNITY_DOWNLOAD_ARCHIVE_URL:?}" \
        | grep "href=\"unityhub://" \
        | sed "s|^.*\"unityhub://\([^/]*\)/\([^\"]*\)\".*$|https://download.unity3d.com/download_unity/\2/UnitySetup-\1|" \
        | while read -r url; do
            printf "%s${SEPARATOR:?}%s${SEPARATOR:?}%s\n" "$(printf "%s" "${url}" | sed "s|.*/UnitySetup-||")" "$(curl -ILsS -o /dev/null -w "%{http_code}" "${url:?}")" "${url:?}"
          done
    )
    echo "${csvData:?}" >"${UnitySetupURLCSVFile:?}"
  echo "UnitySetup URL csv file was saved as ${UnitySetupURLCSVFile:?}" | stderrPipeInfo
fi
)}



function ListInstallableVersions () { (
  versions=$(
    grep -E "[^${SEPARATOR:?}]+${SEPARATOR:?}200${SEPARATOR:?}[^${SEPARATOR:?}]+" "${UnitySetupURLCSVFile:?}" \
      | awk -F"${SEPARATOR:?}" "{print \$1}"
  )
  if [[ $* =~ .*-1.* ]]; then
    echo "${versions}"
  elif command -v column 1>/dev/null; then
    echo "${versions}" | column
  else
    echo "${versions}"
  fi
)}



function Usage () { (
  cat << USAGE
${PROG_NAME:?} is a tool for helping to install Unity to Linux.

Usage:

	${PROG_NAME:?} <command> [arguments]

The commands are:

        init        create or update UnitySetup URL csv file as ${UnitySetupURLCSVFile:?}

                    options
                        -f    fource update

        list        list installable Unity versions

                    options
                        -1    If you want to output a single column, add this option.

USAGE
)}



function main () {
  case "$1" in
  init)
      CreateOrUpdateUnitySetupURLCSVFile "$@"
    ;;
  list|list-versions)
    ListInstallableVersions "$@"
    ;;
  *)
    Usage
    ;;
  esac
} && main "$@"
